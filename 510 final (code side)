{"cells":[{"cell_type":"code","source":["class DFA:\n","    def __init__(self, name, states, alphabet, transitions, start_state, final_states):\n","        self.name = name  # Added name attribute for the DFA\n","        self.states = states\n","        self.alphabet = alphabet\n","        self.transitions = transitions\n","        self.start_state = start_state\n","        self.final_states = final_states\n","\n","    def validate(self, input_string):\n","        current_state = self.start_state\n","        transition_log = []  # To store the transitions\n","\n","        for symbol in input_string:\n","            if symbol in self.transitions[current_state]:\n","                next_state = self.transitions[current_state][symbol]\n","                # Record the transition\n","                transition_log.append((current_state, symbol, next_state))\n","                current_state = next_state\n","            else:\n","                return False, transition_log  # Invalid transition\n","\n","        return current_state in self.final_states, transition_log\n","\n","\n","# DFA definition\n","name = \"ShoppingDFA\"  # Name of the DFA\n","states = {'q0', 'q1', 'q2', 'q3', 'q4'}\n","alphabet = {'e', 'a', 'd', 'c', 'x'}\n","transitions = {\n","    'q0': {'e': 'q1'},\n","    'q1': {'a': 'q2', 'c': 'q2'},\n","    'q2': {'a': 'q2', 'd': 'q2', 'c': 'q3'},\n","    'q3': {'x': 'q4'}\n","}\n","start_state = 'q0'\n","final_states = {'q4'}\n","\n","# Create DFA\n","shopping_dfa = DFA(name, states, alphabet, transitions, start_state, final_states)\n","\n","# Loop to accept user input\n","print(\"Enter strings to test the DFA (type 'exit' to quit):\")\n","while True:\n","    user_input = input(\"Enter a string: \")\n","    if user_input.lower() == 'exit':\n","        print(\"Goodbye!\")\n","        break\n","    elif all(symbol in alphabet for symbol in user_input):\n","        is_valid, transition_log = shopping_dfa.validate(user_input)\n","        if is_valid:\n","            print(f\"Accept ({user_input}): Have a great day!\")\n","            print(\"Transitions:\")\n","            for transition in transition_log:\n","                print(f\"{transition[0]} {transition[1]} {transition[2]}\")\n","        else:\n","            print(f\"reject\")\n","    else:\n","        print(\"Unrecognized character(s)! Please use e, a, d, c, and x for your string!\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wqyICZ-TjZJH","executionInfo":{"status":"ok","timestamp":1734113719835,"user_tz":360,"elapsed":59065,"user":{"displayName":"FireWolf950TFW Gaming","userId":"07121251906794290349"}},"outputId":"736c2c1c-dd12-4f5b-99a2-6d226379377f"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter strings to test the DFA (type 'exit' to quit):\n","Enter a string: eadaacx\n","Accept (eadaacx): Have a great day!\n","Transitions:\n","q0 e q1\n","q1 a q2\n","q2 d q2\n","q2 a q2\n","q2 a q2\n","q2 c q3\n","q3 x q4\n","Enter a string: saaax\n","Unrecognized character(s)! Please use e, a, d, c, and x for your string!\n","Enter a string: eaacx\n","Accept (eaacx): Have a great day!\n","Transitions:\n","q0 e q1\n","q1 a q2\n","q2 a q2\n","q2 c q3\n","q3 x q4\n","Enter a string: edcx\n","reject)\n","Enter a string: exiot\n","Unrecognized character(s)! Please use e, a, d, c, and x for your string!\n","Enter a string: exit\n","Goodbye!\n"]}]}],"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNXnWnzGMgfDp64vAOsE9v6"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}